[{"/Users/joefriel/Documents/Yalla/Learning/Self Projects/music/music/src/App.js":"1","/Users/joefriel/Documents/Yalla/Learning/Self Projects/music/music/src/Game.js":"2"},{"size":641,"mtime":1608570078595,"results":"3","hashOfConfig":"4"},{"size":10124,"mtime":1608806163491,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"41vq2n",{"filePath":"9","messages":"10","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/joefriel/Documents/Yalla/Learning/Self Projects/music/music/src/App.js",["12","13","14"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nimport Game from \"./Game\";\n\nconst App = () => {\n  return (\n    <div>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","/Users/joefriel/Documents/Yalla/Learning/Self Projects/music/music/src/Game.js",["15","16","17","18","19","20","21","22","23","24"],"import React, { useState, useEffect, useRef } from \"react\";\nimport Matter, { Body } from \"matter-js\";\nimport * as Tone from \"tone\";\n\n//create a synth and connect it to the main output (your speakers)\nconst synth = new Tone.Synth().toDestination();\n\nconst Game = () => {\n  const myRef = useRef(null);\n  const [noteVals, setNoteVals] = useState([]);\n\n  const decideNote = (x, y) => {\n    const roundedWidth = Math.floor(x * y * 1000).toString()[0];\n    const roundedHeight = Math.floor(x + y * 400).toString()[0];\n\n    console.log(\"rounded\", roundedHeight, roundedWidth);\n\n    const keys = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n    const scales = [3, 4, 5];\n\n    let key;\n    let scale;\n    if (roundedWidth > 7) {\n      key = keys[6];\n    } else {\n      key = keys[roundedWidth - 1];\n    }\n\n    if (roundedHeight > 3) {\n      scale = scales[2];\n    } else {\n      scale = scales[roundedHeight - 1];\n    }\n\n    return { key, scale };\n  };\n\n  const changeNote = (note) => {\n    const { title1, title2 } = note;\n    const keys = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\n    const index = keys.findIndex((e) => e === title1);\n    // move up a scale\n    if (index === keys.length - 1) {\n      note.title1 = keys[0];\n      note.title2 = title2 + 1;\n      return note;\n    } else if (title1 === \"B\" && title2 === 5) {\n      return null;\n    }\n    // move up a note\n    else {\n      note.title1 = keys[index + 1];\n      return note;\n    }\n  };\n\n  useEffect(() => {\n    var Engine = Matter.Engine,\n      Render = Matter.Render,\n      World = Matter.World,\n      Bodies = Matter.Bodies,\n      Mouse = Matter.Mouse,\n      MouseConstraint = Matter.MouseConstraint,\n      Composite = Matter.Composite,\n      Events = Matter.Events;\n\n    var engine = Engine.create({\n      // positionIterations: 20\n    });\n\n    var closed = false;\n\n    engine.world.gravity.y = 0;\n    engine.world.gravity.x = 0;\n\n    var render = Render.create({\n      element: myRef.current,\n      engine: engine,\n      options: {\n        width: 880,\n        height: 400,\n        wireframes: false,\n      },\n    });\n\n    // WALLS\n    World.add(engine.world, [\n      Bodies.rectangle(440, 0, 880, 50, {\n        isStatic: true,\n        restitution: 1,\n        // friction: 1,\n      }),\n      Bodies.rectangle(440, 400, 880, 50, {\n        isStatic: true,\n        restitution: 1,\n        // friction: 1,\n        // label: \"end\",\n      }),\n      Bodies.rectangle(930, 400, 50, 880, {\n        isStatic: true,\n        opacity: 0,\n        isSensor: true,\n        label: \"end\",\n      }),\n      Bodies.rectangle(-50, 400, 50, 880, {\n        isStatic: true,\n        opacity: 0,\n        // isSensor: true,\n        // label: \"end\",\n      }),\n    ]);\n\n    // BALL\n    var ballA = Bodies.circle(0, 0, 15, {\n      restitution: 1,\n      inertia: 0,\n      friction: 0,\n      frictionAir: 0,\n      frictionStatic: 0,\n      force: { x: 0.01, y: 0.01 },\n      motion: 1,\n      density: 0.0005,\n    });\n\n    World.add(engine.world, [ballA]);\n\n    // add mouse control\n    var mouse = Mouse.create(render.canvas),\n      mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false,\n          },\n        },\n      });\n\n    World.add(engine.world, mouseConstraint);\n\n    var notes = [];\n    var noteToChange = {};\n    var mouseDownX;\n    var mouseDownY;\n    var rotate = 0;\n\n    Matter.Events.on(mouseConstraint, \"mousedown\", function (event) {\n      mouseDownX = event.mouse.position.x;\n      mouseDownY = event.mouse.position.y;\n\n      // check if any bodies underneath\n      const bodiesUnder = Matter.Query.point(notes, {\n        x: mouseDownX,\n        y: mouseDownY,\n      });\n\n      // add key functions while holding down mouse\n      if (bodiesUnder.length > 0) {\n        document.addEventListener(\"keydown\", function (e) {\n          console.log(\"hey\");\n          if (e.keyCode == 82) {\n            console.log(\"bo\", bodiesUnder[0]);\n\n            Matter.Body.rotate(bodiesUnder[0], 45);\n          }\n        });\n      }\n    });\n\n    Matter.Events.on(mouseConstraint, \"mouseup\", function (event) {\n      // get coordinates of mouse click\n      const mouseX = event.mouse.position.x;\n      const mouseY = event.mouse.position.y;\n\n      // check if any bodies underneath\n      const bodiesUnder = Matter.Query.point(notes, {\n        x: mouseX,\n        y: mouseY,\n      });\n\n      if (bodiesUnder.length === 0) {\n        const chosenNote = decideNote(mouseX, mouseY);\n        const newNote = Bodies.rectangle(mouseX, mouseY, 80, 30, {\n          label: \"note\",\n          title1: chosenNote.key,\n          title2: chosenNote.scale,\n          restitution: 1,\n          density: 100,\n        });\n        notes = [...notes, newNote];\n\n        World.add(engine.world, newNote);\n      } else {\n        const bodyToEdit = Composite.get(\n          engine.world,\n          bodiesUnder[0].id,\n          \"body\",\n        );\n        bodyToEdit.isStatic = false;\n        if (bodyToEdit) {\n          if (mouseX === mouseDownX && mouseY === mouseDownY) {\n            const newNote = changeNote(bodyToEdit);\n            const newNoteArrBase = notes.filter(\n              (note) => note.id !== bodyToEdit.id,\n            );\n            if (!newNote) {\n              Composite.remove(engine.world, bodyToEdit);\n              notes = newNoteArrBase;\n            } else {\n              notes = [...newNoteArrBase, newNote];\n            }\n          }\n        }\n      }\n    });\n\n    Matter.Events.on(engine, \"collisionStart\", function (event) {\n      let a = event.pairs[0].bodyA;\n      let b = event.pairs[0].bodyB;\n\n      // detect if a note is hit\n      if (a.label === \"note\" || b.label === \"note\") {\n        const note = a.label === \"note\" ? a : b;\n        const other = a.label === \"note\" ? b : a;\n        note.isStatic = true;\n\n        if (other.label === \"ball\" || other.label === \"Circle Body\") {\n          //play note\n          console.log(\"title\", note, other);\n          // synth.triggerAttackRelease(`${note.title1}${note.title2}`, \"8n\");\n          const sampler = new Tone.Sampler({\n            urls: {\n              C4: \"booC.mp3\",\n              D4: \"booD.mp3\",\n              E4: \"booE.mp3\",\n              F4: \"booF.mp3\",\n              G4: \"booG.mp3\",\n              A4: \"booA.mp3\",\n              B4: \"booB.mp3\",\n            },\n            release: 1,\n            baseUrl: \"./\",\n          }).toDestination();\n\n          Tone.loaded().then(() => {\n            sampler.triggerAttackRelease([`${note.title1}4`], 3);\n            synth.triggerAttackRelease(`${note.title1}${note.title2}`, \"8n\");\n          });\n          const yNeg = other.velocity.y < 0;\n          const xNeg = other.velocity.x < 0;\n          Matter.Body.applyForce(\n            other,\n            { x: other.position.x, y: other.position.y },\n            { x: xNeg ? -0.01 : 0.01, y: yNeg ? -0.01 : 0.01 },\n          );\n        }\n      }\n      // detect if the end is reached\n      if (a.label === \"end\" || b.label === \"end\") {\n        Composite.add(\n          engine.world,\n          Bodies.circle(0, 50, 15, {\n            restitution: 1,\n            inertia: 0,\n            friction: 0,\n            frictionAir: 0,\n            frictionStatic: 0,\n            force: { x: 0.01, y: 0.01 },\n            motion: 1,\n            density: 0.0005,\n          }),\n        );\n      }\n    });\n\n    Matter.Events.on(engine, \"collisionEnd\", function (event) {\n      let a = event.pairs[0].bodyA;\n      let b = event.pairs[0].bodyB;\n\n      // detect if a note is hit\n      if (a.label === \"note\" || b.label === \"note\") {\n        const note = a.label === \"note\" ? a : b;\n        note.isStatic = false;\n\n        const body = a.label === \"note\" ? b : a;\n        Matter.Body.applyForce(\n          note,\n          { x: body.position.x, y: body.position.y },\n          { x: 0.02, y: 0.02 },\n        );\n      }\n    });\n\n    document.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode == 32) {\n        Composite.add(\n          engine.world,\n          Bodies.circle(0, 50, 15, {\n            restitution: 1,\n            inertia: 0,\n            friction: 0,\n            frictionAir: 0,\n            frictionStatic: 0,\n            force: { x: 0.01, y: 0.01 },\n            motion: 1,\n            density: 0.0005,\n          }),\n        );\n      }\n      if (e.keyCode == 83) {\n        const allBodies = Composite.allBodies(engine.world);\n        allBodies.forEach((body) => {\n          if (body.label === \"Circle Body\" || body.label === \"ball\") {\n            console.log(\"hey\", body.velocity);\n            const yNeg = body.velocity.y < 0;\n            const xNeg = body.velocity.x < 0;\n            Matter.Body.applyForce(\n              body,\n              { x: body.position.x, y: body.position.y },\n              { x: xNeg ? -0.01 : 0.01, y: yNeg ? -0.01 : 0.01 },\n            );\n            console.log(\"hey5\", body.velocity);\n          }\n        });\n      }\n\n      if (e.keyCode == 71) {\n        engine.world.gravity.y = engine.world.gravity.y === 1 ? 0 : 1;\n      }\n      if (e.keyCode === 67) {\n        if (closed === false) {\n          Composite.add(engine.world, [\n            Bodies.rectangle(880, 400, 50, 880, {\n              isStatic: true,\n              opacity: 0,\n              // isSensor: true,\n              // label: \"end\",\n              label: \"closed\",\n            }),\n            Bodies.rectangle(0, 400, 50, 880, {\n              isStatic: true,\n              opacity: 0,\n              // isSensor: true,\n              // label: \"end\",\n              label: \"closed\",\n            }),\n          ]);\n          closed = true;\n        } else {\n          const allBodies = Composite.allBodies(engine.world);\n          console.log(\"false\");\n\n          allBodies.forEach((body) => {\n            if (body.label === \"closed\") {\n              body.isSensor = \"true\";\n              body.position = { x: 2000, y: 2000 };\n            }\n          });\n          closed = false;\n        }\n      }\n    });\n\n    Engine.run(engine);\n\n    Render.run(render);\n\n    console.log(engine.world);\n  }, []);\n\n  return <div ref={myRef} />;\n};\nexport default Game;\n",{"ruleId":"25","severity":1,"message":"26","line":1,"column":8,"nodeType":"27","messageId":"28","endLine":1,"endColumn":12},{"ruleId":"25","severity":1,"message":"29","line":3,"column":8,"nodeType":"27","messageId":"28","endLine":3,"endColumn":14},{"ruleId":"25","severity":1,"message":"30","line":4,"column":10,"nodeType":"27","messageId":"28","endLine":4,"endColumn":18},{"ruleId":"25","severity":1,"message":"31","line":2,"column":18,"nodeType":"27","messageId":"28","endLine":2,"endColumn":22},{"ruleId":"25","severity":1,"message":"32","line":10,"column":10,"nodeType":"27","messageId":"28","endLine":10,"endColumn":18},{"ruleId":"25","severity":1,"message":"33","line":10,"column":20,"nodeType":"27","messageId":"28","endLine":10,"endColumn":31},{"ruleId":"25","severity":1,"message":"34","line":66,"column":7,"nodeType":"27","messageId":"28","endLine":66,"endColumn":13},{"ruleId":"25","severity":1,"message":"35","line":143,"column":9,"nodeType":"27","messageId":"28","endLine":143,"endColumn":21},{"ruleId":"25","severity":1,"message":"36","line":146,"column":9,"nodeType":"27","messageId":"28","endLine":146,"endColumn":15},{"ruleId":"37","severity":1,"message":"38","line":162,"column":25,"nodeType":"39","messageId":"40","endLine":162,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":296,"column":21,"nodeType":"39","messageId":"40","endLine":296,"endColumn":23},{"ruleId":"37","severity":1,"message":"38","line":311,"column":21,"nodeType":"39","messageId":"40","endLine":311,"endColumn":23},{"ruleId":"37","severity":1,"message":"38","line":328,"column":21,"nodeType":"39","messageId":"40","endLine":328,"endColumn":23},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'useState' is defined but never used.","'Body' is defined but never used.","'noteVals' is assigned a value but never used.","'setNoteVals' is assigned a value but never used.","'Events' is assigned a value but never used.","'noteToChange' is assigned a value but never used.","'rotate' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]